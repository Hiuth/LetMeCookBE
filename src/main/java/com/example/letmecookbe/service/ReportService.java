package com.example.letmecookbe.service;
import com.example.letmecookbe.enums.NotificationType;
import com.example.letmecookbe.dto.request.ReportRequest;
import com.example.letmecookbe.dto.request.ReportStatusUpdateRequest;
import com.example.letmecookbe.dto.response.ReportResponse;
import com.example.letmecookbe.entity.Account;
import com.example.letmecookbe.entity.Report;
import com.example.letmecookbe.entity.Recipe;
import com.example.letmecookbe.entity.Comment;
import com.example.letmecookbe.exception.AppException;
import com.example.letmecookbe.exception.ErrorCode;
import com.example.letmecookbe.mapper.ReportMapper;
import com.example.letmecookbe.repository.AccountRepository;
import com.example.letmecookbe.repository.ReportRepository;
import com.example.letmecookbe.repository.RecipeRepository;
import com.example.letmecookbe.repository.CommentRepository;
import com.example.letmecookbe.enums.ReportStatus;
import com.example.letmecookbe.enums.ReportType;
import com.example.letmecookbe.enums.ReportSeverity;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile; // <-- Th√™m import n√†y

@Service
@RequiredArgsConstructor
@Slf4j
public class ReportService {
    private final NotificationService notificationService;
    private final ReportRepository reportRepository;
    private final AccountRepository accountRepository;
    private final RecipeRepository recipeRepository;
    private final CommentRepository commentRepository;
    private final ReportMapper reportMapper;
    private final AuthService authService;
    private final FileStorageService fileStorageService; // <-- Inject FileStorageService tr·ªü l·∫°i

    /**
     * T·∫°o m·ªôt b√°o c√°o m·ªõi.
     * Ng∆∞·ªùi d√πng (ROLE_USER) c√≥ th·ªÉ t·∫°o b√°o c√°o v·ªÅ c√¥ng th·ª©c, b√¨nh lu·∫≠n ho·∫∑c ng∆∞·ªùi d√πng kh√°c.
     */
    @PreAuthorize("hasRole('USER')")
    public ReportResponse createReport(ReportRequest request) {
        Account currentUser = authService.getCurrentAccount();
        Account reportedAccountForEntity = null;

        // X·ª≠ l√Ω b√°o c√°o c√¥ng th·ª©c
        if (request.getReportType() == ReportType.REPORT_RECIPE) {
            Recipe recipe = recipeRepository.findById(request.getReportedItemId())
                    .orElseThrow(() -> new AppException(ErrorCode.RECIPE_NOT_FOUND));

            if (recipe.getAccount().getId().equals(currentUser.getId())) {
                throw new AppException(ErrorCode.CANNOT_REPORT_OWN_CONTENT);
            }
            reportedAccountForEntity = recipe.getAccount();
        }

        // X·ª≠ l√Ω b√°o c√°o b√¨nh lu·∫≠n
        else if (request.getReportType() == ReportType.REPORT_COMMENT) {
            Comment comment = commentRepository.findById(request.getReportedItemId())
                    .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_EXIST));

            if (comment.getAccount().getId().equals(currentUser.getId())) {
                throw new AppException(ErrorCode.CANNOT_REPORT_OWN_CONTENT);
            }
            reportedAccountForEntity = comment.getAccount();
        }

        // X·ª≠ l√Ω b√°o c√°o ng∆∞·ªùi d√πng
        else if (request.getReportType() == ReportType.REPORT_USER) {
            Account reportedUser = accountRepository.findById(request.getReportedItemId())
                    .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));

            if (reportedUser.getId().equals(currentUser.getId())) {
                throw new AppException(ErrorCode.CANNOT_REPORT_OWN_ACCOUNT);
            }
            reportedAccountForEntity = reportedUser;
        }

        // Lo·∫°i b√°o c√°o kh√¥ng h·ª£p l·ªá
        else {
            throw new AppException(ErrorCode.INVALID_KEY);
        }

        // Upload ·∫£nh b·∫±ng ch·ª©ng n·∫øu c√≥
        String evidenceImageUrl = null;
        if (request.getEvidenceImage() != null && !request.getEvidenceImage().isEmpty()) {
            try {
                evidenceImageUrl = fileStorageService.uploadFile(request.getEvidenceImage());
            } catch (AppException e) {
                log.error("‚ùå Failed to upload evidence image: {}", e.getMessage());
                throw e;
            } catch (Exception e) {
                log.error("‚ùå Unexpected error during file upload: {}", e.getMessage());
                throw new AppException(ErrorCode.FILE_UPLOAD_FAILED);
            }
        }

        // T·∫°o report
        Report report = reportMapper.toEntity(request);
        report.setReporterAccount(currentUser);
        report.setReportedAccount(reportedAccountForEntity);
        report.setStatus(ReportStatus.PENDING);
        report.setSeverity(determineSeverity(request.getReason(), request.getReportType()));
        report.setEvidenceImageUrl(evidenceImageUrl);

        Report savedReport = reportRepository.save(report);
        log.info("‚úÖ Report created successfully for item ID: {} with type: {} by user: {}",
                request.getReportedItemId(), request.getReportType(), currentUser.getEmail());

        // ‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫øn ADMIN
        List<Account> adminAccounts = accountRepository.findAllByRoles_Name("ADMIN");

        String reportTypeDescription;
        String reportedTarget = "";

        switch (request.getReportType()) {
            case REPORT_COMMENT -> {
                reportTypeDescription = "b√¨nh lu·∫≠n";
                Comment comment = commentRepository.findById(request.getReportedItemId())
                        .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_EXIST));
                reportedTarget = "b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng " + comment.getAccount().getUsername()
                        + ": \"" + comment.getCommentText() + "\"";
            }
            case REPORT_RECIPE -> {
                reportTypeDescription = "c√¥ng th·ª©c";
                Recipe recipe = recipeRepository.findById(request.getReportedItemId())
                        .orElseThrow(() -> new AppException(ErrorCode.RECIPE_NOT_FOUND));
                reportedTarget = "c√¥ng th·ª©c \"" + recipe.getTitle() + "\" c·ªßa " + recipe.getAccount().getUsername();
            }
            case REPORT_USER -> {
                reportTypeDescription = "ng∆∞·ªùi d√πng";
                Account reportedUser = accountRepository.findById(request.getReportedItemId())
                        .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_FOUND));
                reportedTarget = "ng∆∞·ªùi d√πng " + reportedUser.getUsername();
            }
            default -> reportTypeDescription = "n·ªôi dung kh√¥ng x√°c ƒë·ªãnh";
        }

        String adminTitle = "üö® B√°o c√°o m·ªõi t·ª´ ng∆∞·ªùi d√πng";
        String adminContent = "Ng∆∞·ªùi d√πng " + currentUser.getUsername() +
                " v·ª´a g·ª≠i b√°o c√°o v·ªÅ " + reportTypeDescription +
                " li√™n quan ƒë·∫øn " + reportedTarget +
                " v·ªõi n·ªôi dung: " + request.getReason();

        for (Account admin : adminAccounts) {
            // Kh√¥ng g·ª≠i th√¥ng b√°o cho admin n·∫øu h·ªç c≈©ng l√† ng∆∞·ªùi g·ª≠i report
            if (admin.getId().equals(currentUser.getId())) {
                continue;
            }
            // G·ª≠i ri√™ng t∆∞ cho t·ª´ng admin
            notificationService.createTypedNotification(
                    currentUser,
                    admin,
                    NotificationType.REPORT,
                    adminTitle,
                    adminContent
            );
        }

// G·ª≠i th√¥ng b√°o x√°c nh·∫≠n ƒë·∫øn ng∆∞·ªùi g·ª≠i (ch·ªâ user ƒë√≥ nh·∫≠n ƒë∆∞·ª£c)
        notificationService.createTypedNotification(
                null,
                currentUser,
                NotificationType.REPORT,
                "üì© B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i",
                "Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c b√°o c√°o c·ªßa b·∫°n v√† s·∫Ω x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t. C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p!"
        );



        return reportMapper.toDto(savedReport);
    }


    /**
     * X√°c ƒë·ªãnh m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa b√°o c√°o d·ª±a tr√™n l√Ω do v√† lo·∫°i b√°o c√°o.
     */
    private ReportSeverity determineSeverity(String reason, ReportType reportType) {
        switch (reason) {
            case "Spam ho·∫∑c qu·∫£ng c√°o":
                return ReportSeverity.MEDIUM;
            case "Ng√¥n t·ª´ th√π ƒë·ªãch ho·∫∑c qu·∫•y r·ªëi":
                return ReportSeverity.HIGH;
            case "Vi ph·∫°m b·∫£n quy·ªÅn":
                return ReportSeverity.CRITICAL;
            case "L·ª´a ƒë·∫£o ho·∫∑c gian l·∫≠n":
                return ReportSeverity.CRITICAL;
            case "Th√¥ng tin sai l·ªách":
                if (reportType == ReportType.REPORT_RECIPE) {
                    return ReportSeverity.HIGH;
                }
                return ReportSeverity.MEDIUM;
            case "N·ªôi dung kh√¥ng ph√π h·ª£p":
                return ReportSeverity.LOW;
            case "N·ªôi dung b·∫°o l·ª±c":
                return ReportSeverity.HIGH;
            case "Kh√°c":
                return ReportSeverity.LOW;
            default:
                log.warn("Unknown report reason: {}", reason);
                return ReportSeverity.LOW;
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ b√°o c√°o, c√≥ th·ªÉ l·ªçc theo tr·∫°ng th√°i v√† h·ªó tr·ª£ ph√¢n trang.
     * Ch·ªâ Admin (ROLE_ADMIN) m·ªõi c√≥ quy·ªÅn truy c·∫≠p.
     */
    @PreAuthorize("hasRole('ADMIN')")
    public Page<ReportResponse> getAllReports(String status, Pageable pageable) {
        Page<Report> reportsPage;
        if (status != null && !status.isEmpty()) {
            try {
                ReportStatus reportStatus = ReportStatus.valueOf(status.toUpperCase());
                reportsPage = reportRepository.findByStatus(reportStatus, pageable);
            } catch (IllegalArgumentException e) {
                throw new AppException(ErrorCode.INVALID_KEY);
            }
        } else {
            reportsPage = reportRepository.findAll(pageable);
        }
        return reportsPage.map(reportMapper::toDto);
    }

    /**
     * L·∫•y m·ªôt b√°o c√°o c·ª• th·ªÉ theo ID.
     * Ch·ªâ Admin (ROLE_ADMIN) m·ªõi c√≥ quy·ªÅn truy c·∫≠p.
     */
    @PreAuthorize("hasRole('ADMIN')")
    public ReportResponse getReportById(String reportId) {
        Report report = reportRepository.findById(reportId)
                .orElseThrow(() -> new AppException(ErrorCode.REPORT_NOT_FOUND));
        return reportMapper.toDto(report);
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th√™m ph·∫£n h·ªìi c·ªßa Admin cho m·ªôt b√°o c√°o.
     * Ch·ªâ Admin (ROLE_ADMIN) m·ªõi c√≥ quy·ªÅn th·ª±c hi·ªán.
     */
    @Transactional
    @PreAuthorize("hasRole('ADMIN')")
    public ReportResponse updateReportStatus(String reportId, ReportStatusUpdateRequest request) {
        Account currentAdminAccount = authService.getCurrentAccount();

        Report existingReport = reportRepository.findById(reportId)
                .orElseThrow(() -> new AppException(ErrorCode.REPORT_NOT_FOUND));

        reportMapper.updateReportFromStatusRequest(request, existingReport);
        existingReport.setResolvedByAdmin(currentAdminAccount);
        existingReport.setResolvedAt(LocalDateTime.now());

        Report updatedReport = reportRepository.save(existingReport);
        log.info("Report ID {} status updated to {} by admin {}", reportId, request.getNewStatus(), currentAdminAccount.getEmail());

        Account reporter = existingReport.getReporterAccount();

        if (reporter != null) {
            if (ReportStatus.RESOLVED == request.getNewStatus()) {
                log.info("üìå Sending REPORT_RESOLVED notification to {}", reporter.getEmail());
                notificationService.createTypedNotification(
                        null,
                        reporter,
                        NotificationType.REPORT_RESOLVED,
                        "‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω",
                        "B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi admin. C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p!"
                );
            } else if (ReportStatus.REJECTED == request.getNewStatus()) {
                log.info("üìå Sending REPORT_IGNORED notification to {}", reporter.getEmail());
                notificationService.createTypedNotification(
                        null,
                        reporter,
                        NotificationType.REPORT_REJECTED,
                        "‚ö†Ô∏è B√°o c√°o ƒë√£ ƒë∆∞·ª£c xem x√©t",
                        "B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin xem x√©t v√† ƒë√°nh d·∫•u b·ªè qua. C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p!"
                );
            }
        }

        return reportMapper.toDto(updatedReport);
    }

    /**
     * X√≥a m·ªôt b√°o c√°o.
     * Ch·ªâ Admin (ROLE_ADMIN) m·ªõi c√≥ th·ªÉ x√≥a.
     */
    @Transactional
    @PreAuthorize("hasRole('ADMIN')")
    public void deleteReport(String reportId) {
        Report report = reportRepository.findById(reportId)
                .orElseThrow(() -> new AppException(ErrorCode.REPORT_NOT_FOUND));

        // --- X√≥a ·∫£nh b·∫±ng ch·ª©ng tr√™n Cloudinary tr·ªü l·∫°i ---
        if (report.getEvidenceImageUrl() != null && !report.getEvidenceImageUrl().isEmpty()) {
            try {
                fileStorageService.deleteFile(report.getEvidenceImageUrl());
            } catch (AppException e) {
                log.error("Failed to delete evidence image for report ID {}: {}", reportId, e.getMessage());
                // Quy·∫øt ƒë·ªãnh: c√≥ n√™n n√©m l·ªói ti·∫øp hay ch·ªâ ghi log v√† v·∫´n x√≥a b√°o c√°o?
                // Hi·ªán t·∫°i, t√¥i s·∫Ω cho ph√©p b√°o c√°o v·∫´n b·ªã x√≥a d√π ·∫£nh kh√¥ng x√≥a ƒë∆∞·ª£c ƒë·ªÉ tr√°nh k·∫πt DB.
                // T√πy thu·ªôc v√†o y√™u c·∫ßu nghi·ªáp v·ª• c·ªßa b·∫°n.
            }
        }
        // -------------------------------------------

        reportRepository.deleteById(reportId);
        log.info("Report ID {} deleted by admin {}", reportId, authService.getCurrentAccount().getEmail());
    }
    @PreAuthorize("hasRole('ADMIN')") // Ho·∫∑c quy·ªÅn ph√π h·ª£p
    public long getTotalCommentReportsFromReportEntity() {
        // S·ª≠ d·ª•ng ReportType.REPORT_COMMENT v√¨ ƒë√≥ l√† gi√° tr·ªã trong DB c·ªßa b·∫°n
        return reportRepository.countByReportType(ReportType.REPORT_COMMENT);
    }

}