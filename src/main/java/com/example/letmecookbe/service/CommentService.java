package com.example.letmecookbe.service;

import com.example.letmecookbe.dto.request.CommentRequest;
import com.example.letmecookbe.dto.response.CommentResponse;
import com.example.letmecookbe.entity.*;
import com.example.letmecookbe.enums.NotificationType;
import com.example.letmecookbe.exception.AppException;
import com.example.letmecookbe.exception.ErrorCode;
import com.example.letmecookbe.mapper.CommentMapper;
import com.example.letmecookbe.repository.*;
import com.example.letmecookbe.enums.ReportType; // TH√äM IMPORT N√ÄY (gi·∫£ s·ª≠ b·∫°n c√≥ enum ReportType)
import jakarta.transaction.Transactional;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import com.example.letmecookbe.enums.CommentStatus;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.ArrayList;
import java.util.Optional;

import org.springframework.data.jpa.domain.Specification;
import jakarta.persistence.criteria.Predicate;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class CommentService {
    NotificationService notificationService;
    CommentRepository commentRepository;
    CommentMapper commentMapper;
    AccountRepository accountRepository;
    RecipeRepository recipeRepository;
    UserInfoRepository userInfoRepository;
    LikeCommentRepository likedCommentRepository;
    private final ReportRepository reportRepository; // TH√äM D√íNG N√ÄY ƒê·ªÇ INJECT ReportRepository

    private String getAccountIdFromContext() {
        var context = SecurityContextHolder.getContext();
        String email = context.getAuthentication().getName();
        Account account = accountRepository.findAccountByEmail(email)
                .orElseThrow(() -> new AppException(ErrorCode.ACCOUNT_NOT_FOUND));
        return account.getId();
    }

    // --- 1. T·∫°o Comment ---
    @PreAuthorize("hasAuthority('CREATE_COMMENT')")
    public CommentResponse createComment(String recipeId, CommentRequest request) {
        var context = SecurityContextHolder.getContext();
        String userEmail = context.getAuthentication().getName();

        Account commenter = accountRepository.findAccountByEmail(userEmail)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));

        Recipe recipe = recipeRepository.findById(recipeId)
                .orElseThrow(() -> new AppException(ErrorCode.RECIPE_NOT_FOUND));
        UserInfo info = userInfoRepository.findByEmail(commenter.getEmail());

        Comment comment = commentMapper.toComment(request);
        comment.setAccount(commenter);
        comment.setRecipe(recipe);
        comment.setUserInfo(info);
        comment.setStatus(CommentStatus.APPROVED);
        comment = commentRepository.save(comment);

        // ‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫øn ch·ªß b√†i vi·∫øt
        Account recipeOwner = recipe.getAccount();
        if (!recipeOwner.getEmail().equalsIgnoreCase(commenter.getEmail())) {
            String title = "üí¨ C√≥ b√¨nh lu·∫≠n m·ªõi";
            String content = commenter.getUsername() + " v·ª´a b√¨nh lu·∫≠n c√¥ng th·ª©c c·ªßa b·∫°n: " + recipe.getTitle();

            notificationService.createTypedNotification(
                    commenter,
                    recipeOwner,
                    NotificationType.COMMENT, // üëà X√°c ƒë·ªãnh r√µ lo·∫°i th√¥ng b√°o
                    title,
                    content
            );

        }

        // ‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ Admin
        List<Account> adminAccounts = accountRepository.findAllByRoles_Name("ADMIN");
        for (Account admin : adminAccounts) {
            String title = "üì¢ B√¨nh lu·∫≠n m·ªõi v·ª´a ƒë∆∞·ª£c ƒëƒÉng";
            String content = "Ng∆∞·ªùi d√πng " + commenter.getUsername() + " ƒë√£ b√¨nh lu·∫≠n c√¥ng th·ª©c: " + recipe.getTitle();

            notificationService.createTypedNotification(
                    commenter,
                    admin,
                    NotificationType.COMMENT, // üëà Lo·∫°i th√¥ng b√°o l√† COMMENT
                    title,
                    content
            );
        }


        return commentMapper.toCommentResponse(comment);
    }


    // --- 2. Ch·ªânh s·ª≠a Comment ---
    @PreAuthorize("hasAuthority('UPDATE_COMMENT')")
    public CommentResponse updateComment(String commentId, CommentRequest request) {
        var context = SecurityContextHolder.getContext();
        String currentEmail = context.getAuthentication().getName();

        Account currentUserAccount = accountRepository.findAccountByEmail(currentEmail)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));

        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_EXIST));

        // Ki·ªÉm tra quy·ªÅn: Ch·ªâ ng∆∞·ªùi t·∫°o comment m·ªõi ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a
        if (!comment.getAccount().getId().equals(currentUserAccount.getId())) {
            throw new AppException(ErrorCode.UNAUTHORIZED);
        }

        comment.setCommentText(request.getCommentText());
        comment = commentRepository.save(comment);
        return commentMapper.toCommentResponse(comment);
    }

    // --- 3. X√≥a Comment ---
    @Transactional
    @PreAuthorize("hasAuthority('DELETE_COMMENT')")
    public void deleteComment(String commentId) {
        LikeComment likeComment = likedCommentRepository.findByCommentId(commentId);
        likedCommentRepository.delete(likeComment);
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_EXIST));
        commentRepository.delete(comment);
    }

    @PreAuthorize("hasAuthority('GET_COMMENT_BY_ACCOUNT_ID')")
    public Page<CommentResponse> getCommentsByAccountId(Pageable pageable) {
        Page<Comment> comments = commentRepository.findByAccountId(getAccountIdFromContext(), pageable);
        if (comments.isEmpty()) {
            throw new AppException(ErrorCode.LIST_EMPTY);
        }
        return comments.map(commentMapper::toCommentResponse);
    }


    // --- 4. Xem Comment c·ªßa B√†i ƒëƒÉng (c√≥ ph√¢n trang) ---
    @PreAuthorize("hasAuthority('GET_COMMENTS_BY_RECIPE')")
    public Page<CommentResponse> getCommentsByRecipe(String recipeId, Pageable pageable) {
        if (!recipeRepository.existsById(recipeId)) {
            throw new AppException(ErrorCode.RECIPE_NOT_FOUND);
        }
        Page<Comment> commentsPage = commentRepository.findByRecipe_Id(recipeId, pageable);
        return commentsPage.map(commentMapper::toCommentResponse);
    }


    // --- 5. Xem m·ªôt Comment c·ª• th·ªÉ theo ID ---
    @PreAuthorize("hasAuthority('GET_COMMENT_BY_ID')")
    public CommentResponse getCommentById(String commentId) {
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_EXIST));
        return commentMapper.toCommentResponse(comment);
    }

    // --- 6. Xem t·∫•t c·∫£ Comment (c√≥ ph√¢n trang) ---
    @PreAuthorize("hasAuthority('GET_ALL_COMMENT')")
    public Page<CommentResponse> getAllComments(Pageable pageable,
                                                String searchTerm,
                                                String recipeId,
                                                String status,
                                                String date) {
        Specification<Comment> spec = (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();
            // Filter by searchTerm (commentText or account username)
            if (searchTerm != null && !searchTerm.trim().isEmpty()) {
                Predicate commentTextPredicate = criteriaBuilder.like(criteriaBuilder.lower(root.get("commentText")), "%" + searchTerm.toLowerCase() + "%");
                Predicate usernamePredicate = criteriaBuilder.like(criteriaBuilder.lower(root.get("account").get("username")), "%" + searchTerm.toLowerCase() + "%");
                predicates.add(criteriaBuilder.or(commentTextPredicate, usernamePredicate));
            }
            // Filter by recipeId
            if (recipeId != null && !recipeId.equals("all") && !recipeId.trim().isEmpty()) {
                predicates.add(criteriaBuilder.equal(root.get("recipe").get("id"), recipeId));
            }
            //Filter by status
            if (status != null && !status.equals("all") && !status.trim().isEmpty()) {
                try {
                    // Chuy·ªÉn ƒë·ªïi chu·ªói status sang Enum CommentStatus
                    CommentStatus commentStatus = CommentStatus.valueOf(status.toUpperCase());
                    predicates.add(criteriaBuilder.equal(root.get("status"), commentStatus));
                } catch (IllegalArgumentException e) {
                    // X·ª≠ l√Ω n·∫øu chu·ªói tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá (v√≠ d·ª•: ng∆∞·ªùi d√πng g·ª≠i "abc" thay v√¨ "APPROVED")
                    // ·ªû ƒë√¢y, ch√∫ng ta ch·ªâ in l·ªói ra console v√† b·ªè qua b·ªô l·ªçc n√†y.
                    System.err.println("Invalid status parameter: " + status);
                }
            }
            if (date != null && !date.trim().isEmpty()) {
                try {
                    LocalDate searchDate = LocalDate.parse(date); // Ph√¢n t√≠ch chu·ªói ng√†y (v√≠ d·ª• "2024-06-17") th√†nh LocalDate
                    predicates.add(criteriaBuilder.equal(criteriaBuilder.function("DATE", LocalDate.class, root.get("createdAt")), searchDate));
                } catch (DateTimeParseException e) {
                    // X·ª≠ l√Ω n·∫øu ƒë·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá
                    System.err.println("Invalid date format: " + date);
                }
            }
            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
        Page<Comment> commentsPage = commentRepository.findAll(spec, pageable);
        return commentsPage.map(commentMapper::toCommentResponse);
    }

    //7. C·∫≠p nh·∫≠t tr·∫°ng th√°i Comment
    @PreAuthorize("hasRole('ADMIN')")
    public CommentResponse updateCommentStatus(String commentId, String newStatusString) {
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new AppException(ErrorCode.COMMENT_NOT_EXIST));
        try {
            CommentStatus newStatus = CommentStatus.valueOf(newStatusString.toUpperCase());
            comment.setStatus(newStatus);
        } catch (IllegalArgumentException e) {
            throw new AppException(ErrorCode.INVALID_COMMENT_STATUS);
        }
        comment = commentRepository.save(comment);
        return commentMapper.toCommentResponse(comment);
    }

    // --- 8. L·∫•y t·ªïng s·ªë l∆∞·ª£ng comment theo tr·∫°ng th√°i b√°o c√°o (v√≠ d·ª•: PENDING) ---
    @PreAuthorize("hasRole('ADMIN')") // Ch·ªâ ADMIN m·ªõi c√≥ quy·ªÅn n√†y
    public long countCommentsByStatus(CommentStatus status) {
        return commentRepository.countByStatus(status);
    }

    // --- 9. L·∫•y t·ªïng s·ªë l∆∞·ª£ng T·∫§T C·∫¢ comment trong h·ªá th·ªëng ---
    @PreAuthorize("hasRole('ADMIN')") // Ho·∫∑c quy·ªÅn ph√π h·ª£p
    public long getTotalCommentsCount() {
        return commentRepository.count();
    }

    // --- 10. L·∫•y t·ªïng s·ªë l∆∞·ª£ng b√°o c√°o comment t·ª´ entity Report ---
    @PreAuthorize("hasRole('ADMIN')") // Ch·ªâ ADMIN m·ªõi c√≥ quy·ªÅn n√†y
    public long getTotalCommentReportsFromReportEntity() {
        // ƒê·∫£m b·∫£o ReportType.COMMENT l√† gi√° tr·ªã enum ch√≠nh x√°c trong ReportType c·ªßa b·∫°n
        return reportRepository.countByReportType(ReportType.REPORT_COMMENT);
    }
}